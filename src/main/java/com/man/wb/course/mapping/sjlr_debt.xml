<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sjlr_debt"> 
	<parameterMap type="java.util.HashMap" id="paraMap" />
	
	<!--获取[课时表]列表 -->
	<select id="index" parameterMap="paraMap" resultType="hashmap">
		<if test="start != null"><![CDATA[select t.*  from ( ]]></if>
			select t.id	,
					t.type	,
					t.status	,
					t.area,
					t.name	,
					t.amount	,
					t.address	,
                    u.username,
                    u.realname,
					t.craeted_at,
					date_format(t.s_date,'%Y-%m-%d') as s_date	,
					date_format(t.e_date,'%Y-%m-%d') as e_date	 FROM sjlr_package t left join sys_user u  on t.target = u.id
              where t.del_flag = 0
              
              <if test="type != null">
			and type =#{type}
		</if>
		<if test="filter != null">
			and ${filter}
		</if>
		<!-- <if test="sort != null">ORDER BY ${sort} ${dir}</if> -->
		<!-- <if test="sort == null"> --><!-- </if> -->	
		<if test="start != null"> <![CDATA[) t  ORDER BY t.craeted_at DESC limit ${start},${limit}]]></if>		
	</select>
	
	<!--获取[课时表]列表总数 -->
	<select id="indexCount" parameterMap="paraMap" resultType="int">
			select count(1) FROM sjlr_package t
		WHERE
		t.del_flag = 0
		 <if test="type != null">
			and type =#{type}
		</if>
		<if test="filter != null">
			and ${filter}
		</if>
	</select>
	
	<update id="updateByPrimaryKey" parameterType="hashmap">
		update sjlr_package
		set
		<if test="detial != null">
			detial = #{detial,jdbcType=INTEGER},
		</if>
		<if test="del_flag != null">
			del_flag = #{del_flag,jdbcType=INTEGER},
		</if>
		<if test="name != null">
			name = #{name},
		</if>
		<if test="area != null">
			area = #{area},
		</if>
		<if test="pic_uuid != null">
			pic_uuid = #{pic_uuid},
		</if>
		
		<if test="amount != null">
			amount = #{amount},
		</if>
		<if test="address != null">
			address = #{address},
		</if>
		<if test="start != null">
			s_date = #{start},
		</if>
		
		<if test="end != null">
			e_date = #{end},
		</if>
		<if test="target != null">
			target = #{target},
			targetname = #{person_name},
			status = #{status},
		</if>
		updated_at = now()
		where 1=1  
		<if test="id != null">
		and id = #{id,jdbcType=INTEGER}
		</if>
		<if test="target != null">
		and uuid = #{uuid,jdbcType=INTEGER}
		</if>
	</update>
	
	<select id="loadMore" parameterMap="paraMap" resultType="hashmap">
		 select id	,
				type	,
				status	,
				uuid,
				name	,
				amount	,
				serial_id,
				address	,
                concat(date_format(s_date,'%Y'),'年',date_format(s_date,'%m'),'月',date_format(s_date,'%d'),'日') as s_date,
                concat(date_format(e_date,'%Y'),'年',date_format(e_date,'%m'),'月',date_format(e_date,'%d'),'日') as e_date
				
                from sjlr_package 
            where 1 =1 
             and del_flag = 0 and  status = 0
            <if test="uuid != null">
            	 and (select id from sjlr_package where uuid = #{uuid}) > id
            </if>
             order by id desc
             limit 10 
	</select>
	
	<!--根据ID查询[课时表]的数据 -->
	<select id="getCoursesCount" parameterMap="paraMap" resultType="hashmap">
		 select t.id,t.name,date_format(now(),'%M') as month ,count(r.id) as count from wb_course  t left join wb_record r on t.id = r.cid  and date_format(now(),'%M,%Y') = date_format(created_at,'%M,%Y') group by year,month,cid,t.name 
		 union all
		 select t.id,t.name,date_format(date_sub(now(),interval 1 month),'%M')  as month ,count(r.id) as count from wb_course  t left join wb_record r on t.id = r.cid  and date_format(date_sub(now(),interval 1 month),'%M,%Y') = date_format(created_at,'%M,%Y') group by year,month,cid,t.name 
	</select>
	
	<!--向[课时表]中插入数据 -->
	<insert id="insert" parameterMap="paraMap">
			insert into sjlr_package(
			detial,
				pic_uuid,
				uuid    ,
				area,
				serial_id,
				type	,
				status	,
				name	,
				amount	,
				address	,
				s_date	,
				e_date	,
				updated_at	,
				craeted_at
				) values (
				#{detial},
				#{pic_uuid},
				 #{uuid} ,
				 #{area},#{serial_id}, #{type} , #{status}, #{name},#{amount},#{address},
				#{start},#{end},
				now(),now())
			<selectKey resultType="int" order="AFTER" keyProperty="id"><![CDATA[SELECT LAST_INSERT_ID()]]></selectKey>
	</insert>
	
	<!--向[role-action]中插入数据 -->
	<insert id="insert_ra" parameterMap="paraMap">
			 insert into sys_action_role
			 	(ACTION_ID,ROLE_ID,DATA_ID,CREATER_ID,CREATE_DATE)
			 values 
			 	(#{id,jdbcType=VARCHAR},#{role_id,jdbcType=VARCHAR},#{data_id,jdbcType=VARCHAR},#{create_user,jdbcType=VARCHAR},#{create_date})
	</insert>
	
	<!--删除[课时表]的对应ID的数据 -->
	<delete id="delete" parameterMap="paraMap">
		delete from wb_record where id in 
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>
	
	<!--删除[课时表]的对应ID的数据 -->
	<delete id="del_related_ar" parameterMap="paraMap">
		delete from sys_action_role where role_id = #{id} 
	</delete>
	
	
	<!--更新[课时表]的对应ID的数据 -->
	<update id="updateOne" parameterMap="paraMap">
		update sys_role set 
			role_name=#{role_name},
			<!-- role_type=#{role_type}, -->
			role_info=#{role_info},
			<!-- del_state=#{del_state}, -->
			<!-- create_user=#{create_user},
			create_date=#{create_date}, -->
			role_main=#{role_main},
			update_user=#{update_user},
			update_date=#{update_date} 
		where id=#{id}		
	</update>
	
	
	<!--根据ID查询[课时表]的数据 -->
	<select id="selectOneCheck" parameterMap="paraMap" resultType="hashmap">
		select 
				target	,
				targetname	
				from sjlr_package a 
where 1=1
		<if test="uuid != null">
			and uuid = #{uuid}
		</if> 
 
	</select>
	
	<!--根据ID查询[课时表]的数据 -->
	<select id="selectOne" parameterMap="paraMap" resultType="hashmap">
		select a.id	,
				a.type	,
				a.status	,
				a.detial,
				a.name	,
				a.area,
				a.amount	,
				a.address	,
				case when a.target is not null then 'close' else 'open' end as target_status,
				case when a.type = 0 then '个人' when a.type =1 then '银行' when a.type =2 then '企业' when a.type =3 then '债务转让' end as kind,
                f.filename_ori,
                a.pic_uuid,
				date_format(a.s_date,'%Y-%m-%d'	) as s_date,
				date_format(a.e_date,'%Y-%m-%d'	) as	e_date ,
				concat(date_format(a.s_date,'%Y'),'年',date_format(a.s_date,'%m'),'月',date_format(a.s_date,'%d'),'日') as s_f_date,
                concat(date_format(a.e_date,'%Y'),'年',date_format(a.e_date,'%m'),'月',date_format(a.e_date,'%d'),'日') as e_f_date
from sjlr_package a left join sys_file f on a.pic_uuid = f.uuid 
where 1=1 
<if test="id != null">
			and a.id=#{id}
		</if>
		<if test="uuid != null">
			and a.uuid = #{uuid}
		</if> 
 
	</select>
	
	<select id="getRoleActions" parameterMap="paraMap" resultType="hashmap">
		select action_id from sys_action_role where role_id = #{role_id} 
	</select>
	
	<!--更新[课时表]的部分数据 -->
	<update id="update" parameterMap="paraMap">
		update sys_role set role_name=#{role_name,jdbcType=VARCHAR},role_type=#{role_type,jdbcType=VARCHAR},role_info=#{role_info,jdbcType=VARCHAR},del_state=#{del_state,jdbcType=VARCHAR},creater_id=#{creater_id,jdbcType=VARCHAR},create_date=#{create_date,jdbcType=DATE},updater_id=#{updater_id,jdbcType=VARCHAR},update_date=#{update_date,jdbcType=DATE} where ID in 
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">
			#{id}
		</foreach>
	</update>
	<!--查询所有课时-->
	<select id="getAllRole" parameterMap="paraMap" resultType="hashmap">
		select a.id,a.role_name,a.role_type,a.role_info,a.del_state,a.create_user,a.create_date,a.update_user,a.update_date from sys_role a where a.del_state = '0';
	</select>
</mapper>